{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Person","person","deleteHandler","name","number","onClick","Persons","persons","searchText","deletePerson","filter","toLowerCase","startsWith","map","id","PersonForm","props","onSubmit","addNewPerson","value","newName","onChange","newNameChange","newNumber","newNumberChange","type","Filter","newSearch","baseUrl","service","getAll","axios","get","then","response","data","create","newPerson","post","deleteEntry","delete","update","updatedPerson","put","Notification","message","isError","className","App","useState","setPersons","setNewName","setNewNumber","setSearchText","notificationMessage","setNotificationMessage","setIsError","useEffect","personService","allPersons","setNotification","setTimeout","event","target","preventDefault","existingPerson","find","undefined","window","confirm","per","createdPerson","concat","personsService","p","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d793556.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Person = ({person, deleteHandler}) => {\r\n    return (\r\n        <div>{person.name} {person.number} <button onClick={deleteHandler}>delete</button></div>\r\n    )\r\n}\r\n\r\nconst Persons = ({persons, searchText, deletePerson}) => {\r\n    return (\r\n        <div>\r\n            {persons.filter(person => person.name.toLowerCase().startsWith(searchText.toLowerCase()))\r\n                .map(person =>\r\n                    <Person person={person} key={person.id} deleteHandler={() => deletePerson(person)}/>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from \"react\";\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.addNewPerson}>\r\n            <div>\r\n                name: <input\r\n                value={props.newName}\r\n                onChange={props.newNameChange}\r\n            />\r\n            </div>\r\n            <div>\r\n                number: <input\r\n                value={props.newNumber}\r\n                onChange={props.newNumberChange}\r\n            />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from \"react\";\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter shown with: <input\r\n            value={props.searchText}\r\n            onChange={props.newSearch}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import axios from \"axios\";\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newPerson => {\r\n    const request = axios.post(baseUrl, newPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = updatedPerson => {\r\n    const request = axios.put(`${baseUrl}/${updatedPerson.id}`, updatedPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteEntry = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst service = { getAll, create, deleteEntry, update }\r\n\r\nexport default service","import React from \"react\";\r\n\r\nconst Notification = ({ message, isError }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={`notification ${isError ? 'error' : 'success'}`}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, {useState, useEffect} from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport personService from \"./services/persons\";\nimport personsService from \"./services/persons\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchText, setSearchText] = useState('')\n    const [notificationMessage, setNotificationMessage] = useState(null)\n    const [isError, setIsError] = useState(false)\n\n    const hook = () => {\n        personService\n            .getAll()\n            .then(allPersons => setPersons(allPersons))\n    }\n\n    useEffect(hook, [])\n\n    const addNewPerson = (event) => {\n        event.preventDefault()\n\n        const existingPerson = persons.find(person => person.name === newName);\n        if (existingPerson !== undefined) {\n            const shouldAdd = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n            if (!shouldAdd) {\n                setNewName('')\n                setNewNumber('')\n                return\n            }\n\n            const updatedPerson = {\n                ...existingPerson,\n                number: newNumber\n            }\n\n            personService.update(updatedPerson).then(updatedPerson => {\n                setPersons(persons.map(per => per.id === updatedPerson.id ? updatedPerson : per))\n                setNewName('')\n                setNewNumber('')\n                setNotification(`Added ${updatedPerson.name}`, false)\n            })\n        } else {\n            const newPerson = {\n                name: newName,\n                number: newNumber\n            }\n\n            personService.create(newPerson).then(createdPerson => {\n                setPersons(persons.concat(createdPerson))\n                setNewName('')\n                setNewNumber('')\n                setNotification(`Added ${createdPerson.name}`, false)\n            })\n        }\n    };\n\n    const deletePerson = person => {\n        const shouldBeDeleted = window.confirm(`Delete ${person.name}?`)\n        if (shouldBeDeleted) {\n            personsService.deleteEntry(person.id).then(() => {\n                setPersons(persons.filter(p => p.id !== person.id))\n            }).catch(error => {\n                setNotification(`${person.name} has already been removed from server`, true)\n                setPersons(persons.filter(p => p.id !== person.id))\n            })\n        }\n    }\n\n    const setNotification = (message, isError) => {\n        setIsError(isError)\n        setNotificationMessage(message)\n        setTimeout(() => {setNotificationMessage(null)}, 2000)\n    }\n\n    const newNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const newNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const newSearch = (event) => {\n        setSearchText(event.target.value);\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notificationMessage} isError={isError}/>\n            <Filter searchText={searchText}\n                    newSearch={newSearch}\n            />\n            <h2>add a number</h2>\n            <PersonForm addNewPerson={addNewPerson}\n                        newName={newName}\n                        newNameChange={newNameChange}\n                        newNumber={newNumber}\n                        newNumberChange={newNumberChange}\n            />\n            <h2>Numbers</h2>\n            <Persons persons={persons}\n                     searchText={searchText}\n                     deletePerson={deletePerson}\n            />\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}